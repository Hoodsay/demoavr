
m128_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010e  0080010e  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e6  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  0000169b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000195  00000000  00000000  00001f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	ae c0       	rjmp	.+348    	; 0x18e <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3e d0       	rcall	.+124    	; 0x140 <main>
  c4:	ef c0       	rjmp	.+478    	; 0x2a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <numberToDigits>:
}

unsigned char segchar(unsigned char number) {
	
	return digitsArray[number];
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ac 01       	movw	r20, r24
  ce:	fb 01       	movw	r30, r22
  d0:	eb 01       	movw	r28, r22
  d2:	24 96       	adiw	r28, 0x04	; 4
  d4:	9a 01       	movw	r18, r20
  d6:	ad ec       	ldi	r26, 0xCD	; 205
  d8:	bc ec       	ldi	r27, 0xCC	; 204
  da:	d5 d0       	rcall	.+426    	; 0x286 <__umulhisi3>
  dc:	96 95       	lsr	r25
  de:	87 95       	ror	r24
  e0:	96 95       	lsr	r25
  e2:	87 95       	ror	r24
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	9c 01       	movw	r18, r24
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	82 0f       	add	r24, r18
  fc:	93 1f       	adc	r25, r19
  fe:	9a 01       	movw	r18, r20
 100:	28 1b       	sub	r18, r24
 102:	39 0b       	sbc	r19, r25
 104:	21 93       	st	Z+, r18
 106:	9a 01       	movw	r18, r20
 108:	be d0       	rcall	.+380    	; 0x286 <__umulhisi3>
 10a:	ac 01       	movw	r20, r24
 10c:	56 95       	lsr	r21
 10e:	47 95       	ror	r20
 110:	56 95       	lsr	r21
 112:	47 95       	ror	r20
 114:	56 95       	lsr	r21
 116:	47 95       	ror	r20
 118:	ce 17       	cp	r28, r30
 11a:	df 07       	cpc	r29, r31
 11c:	d9 f6       	brne	.-74     	; 0xd4 <numberToDigits+0xc>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <timer_ini>:

void timer_ini(void) {
	TCCR1B |= 1 << WGM12;
 124:	8e b5       	in	r24, 0x2e	; 46
 126:	88 60       	ori	r24, 0x08	; 8
 128:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1 << OCIE1A;
 12a:	87 b7       	in	r24, 0x37	; 55
 12c:	80 61       	ori	r24, 0x10	; 16
 12e:	87 bf       	out	0x37, r24	; 55
	OCR1AH = 0b00001100;
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00110101;
 134:	85 e3       	ldi	r24, 0x35	; 53
 136:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= 1 << CS11;
 138:	8e b5       	in	r24, 0x2e	; 46
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	8e bd       	out	0x2e, r24	; 46
 13e:	08 95       	ret

00000140 <main>:
unsigned char *pntrDigitsOfNumber = digitsOfNumber;
unsigned int number;

int main(void)
{
    DDRC = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b11111111;
 144:	85 bb       	out	0x15, r24	; 21
	DDRA = 0b00001111;
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	8a bb       	out	0x1a, r24	; 26
	
	sei();
 14a:	78 94       	sei
	
	timer_ini();
 14c:	eb df       	rcall	.-42     	; 0x124 <timer_ini>
	

	while(1) {
		
		for (number = 0; number < 10000; ++number) {
 14e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <number+0x1>
 152:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <number>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
			numberToDigits(number, digitsOfNumber);
 15a:	6e e0       	ldi	r22, 0x0E	; 14
 15c:	71 e0       	ldi	r23, 0x01	; 1
 15e:	b4 df       	rcall	.-152    	; 0xc8 <numberToDigits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	80 e7       	ldi	r24, 0x70	; 112
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x26>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x30>
 170:	00 00       	nop
	timer_ini();
	

	while(1) {
		
		for (number = 0; number < 10000; ++number) {
 172:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <number>
 176:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <number+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <number+0x1>
 180:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <number>
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	27 e2       	ldi	r18, 0x27	; 39
 188:	92 07       	cpc	r25, r18
 18a:	38 f3       	brcs	.-50     	; 0x15a <main+0x1a>
 18c:	e0 cf       	rjmp	.-64     	; 0x14e <main+0xe>

0000018e <__vector_12>:
	OCR1AH = 0b00001100;
	OCR1AL = 0b00110101;
	TCCR1B |= 1 << CS11;
}

ISR(TIMER1_COMPA_vect) {
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	0b b6       	in	r0, 0x3b	; 59
 19a:	0f 92       	push	r0
 19c:	2f 93       	push	r18
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	switch (nCount) {
 1a6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <nCount>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	99 f0       	breq	.+38     	; 0x1d4 <__vector_12+0x46>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <__vector_12+0x2c>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	41 f1       	breq	.+80     	; 0x204 <__vector_12+0x76>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	e1 f1       	breq	.+120    	; 0x230 <__vector_12+0xa2>
 1b8:	50 c0       	rjmp	.+160    	; 0x25a <__vector_12+0xcc>
		case 0:
			PORTA = 0b00000001;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8b bb       	out	0x1b, r24	; 27
			PORTC = digitsArray[*pntrDigitsOfNumber];
 1be:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1c2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	e0 81       	ld	r30, Z
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ee 5f       	subi	r30, 0xFE	; 254
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	80 81       	ld	r24, Z
 1d0:	85 bb       	out	0x15, r24	; 21
			break;
 1d2:	43 c0       	rjmp	.+134    	; 0x25a <__vector_12+0xcc>
		case 1:
			if (number > 9) PORTA = 0b00000010;
 1d4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <number>
 1d8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <number+0x1>
 1dc:	0a 97       	sbiw	r24, 0x0a	; 10
 1de:	18 f0       	brcs	.+6      	; 0x1e6 <__vector_12+0x58>
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_12+0x5a>
			else PORTA = 0b00000000;
 1e6:	1b ba       	out	0x1b, r1	; 27
			PORTC = digitsArray[*(pntrDigitsOfNumber + 1)] & digitsArray[10];
 1e8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1ec:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1f0:	e1 81       	ldd	r30, Z+1	; 0x01
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ee 5f       	subi	r30, 0xFE	; 254
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	90 81       	ld	r25, Z
 1fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <digitsArray+0xa>
 1fe:	89 23       	and	r24, r25
 200:	85 bb       	out	0x15, r24	; 21
			break;
 202:	2b c0       	rjmp	.+86     	; 0x25a <__vector_12+0xcc>
		case 2:
			if (number > 99) PORTA = 0b00000100;
 204:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <number>
 208:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <number+0x1>
 20c:	84 36       	cpi	r24, 0x64	; 100
 20e:	91 05       	cpc	r25, r1
 210:	18 f0       	brcs	.+6      	; 0x218 <__vector_12+0x8a>
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	8b bb       	out	0x1b, r24	; 27
 216:	01 c0       	rjmp	.+2      	; 0x21a <__vector_12+0x8c>
			else PORTA = 0b00000000;
 218:	1b ba       	out	0x1b, r1	; 27
			PORTC = digitsArray[*(pntrDigitsOfNumber + 2)];
 21a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 21e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 222:	e2 81       	ldd	r30, Z+2	; 0x02
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ee 5f       	subi	r30, 0xFE	; 254
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	80 81       	ld	r24, Z
 22c:	85 bb       	out	0x15, r24	; 21
			break;
 22e:	15 c0       	rjmp	.+42     	; 0x25a <__vector_12+0xcc>
		case 3:
			if (number > 999) PORTA = 0b00001000;
 230:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <number>
 234:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <number+0x1>
 238:	88 3e       	cpi	r24, 0xE8	; 232
 23a:	93 40       	sbci	r25, 0x03	; 3
 23c:	18 f0       	brcs	.+6      	; 0x244 <__vector_12+0xb6>
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	8b bb       	out	0x1b, r24	; 27
 242:	01 c0       	rjmp	.+2      	; 0x246 <__vector_12+0xb8>
			else PORTA = 0b00000000;
 244:	1b ba       	out	0x1b, r1	; 27
			PORTC = digitsArray[*(pntrDigitsOfNumber + 3)];
 246:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 24a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 24e:	e3 81       	ldd	r30, Z+3	; 0x03
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ee 5f       	subi	r30, 0xFE	; 254
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	80 81       	ld	r24, Z
 258:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			break;
	}
	++nCount;
 25a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <nCount>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
	if (nCount > 3) {
 260:	84 30       	cpi	r24, 0x04	; 4
 262:	18 f4       	brcc	.+6      	; 0x26a <__vector_12+0xdc>
			PORTC = digitsArray[*(pntrDigitsOfNumber + 3)];
			break;
		default:
			break;
	}
	++nCount;
 264:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <nCount>
 268:	02 c0       	rjmp	.+4      	; 0x26e <__vector_12+0xe0>
	if (nCount > 3) {
		nCount = 0;
 26a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <nCount>
	}
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0b be       	out	0x3b, r0	; 59
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__umulhisi3>:
 286:	a2 9f       	mul	r26, r18
 288:	b0 01       	movw	r22, r0
 28a:	b3 9f       	mul	r27, r19
 28c:	c0 01       	movw	r24, r0
 28e:	a3 9f       	mul	r26, r19
 290:	70 0d       	add	r23, r0
 292:	81 1d       	adc	r24, r1
 294:	11 24       	eor	r1, r1
 296:	91 1d       	adc	r25, r1
 298:	b2 9f       	mul	r27, r18
 29a:	70 0d       	add	r23, r0
 29c:	81 1d       	adc	r24, r1
 29e:	11 24       	eor	r1, r1
 2a0:	91 1d       	adc	r25, r1
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
