
DS1307_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec0  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a51  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000735  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000164  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 30       	cpi	r26, 0x07	; 7
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0d d0       	rcall	.+26     	; 0xc4 <main>
  aa:	61 c1       	rjmp	.+706    	; 0x36e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <DS1307_convertToDec>:
	return ((c / 10) << 4) | (c % 10);
}

unsigned char DS1307_convertToDec(unsigned char c) {
	
	return ((c >> 4) * 10 + (0b00001111 & c));
  ae:	98 2f       	mov	r25, r24
  b0:	92 95       	swap	r25
  b2:	9f 70       	andi	r25, 0x0F	; 15
  b4:	99 0f       	add	r25, r25
  b6:	29 2f       	mov	r18, r25
  b8:	22 0f       	add	r18, r18
  ba:	22 0f       	add	r18, r18
  bc:	92 0f       	add	r25, r18
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	89 0f       	add	r24, r25
  c2:	08 95       	ret

000000c4 <main>:

unsigned char sec, min, hour, dayOfWeek, day, month, year;

int main(void) {
	
	I2C_Init();
  c4:	03 d1       	rcall	.+518    	; 0x2cc <I2C_Init>
	USART_Init(8);
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	41 d1       	rcall	.+642    	; 0x34e <USART_Init>
		dayOfWeek = DS1307_convertToDec(dayOfWeek);
		day = DS1307_convertToDec(day);
		month = DS1307_convertToDec(month);
		year = DS1307_convertToDec(year);
		
		 USART_Transmit(day/10+0x30);
  cc:	cd ec       	ldi	r28, 0xCD	; 205
// 	
// 	I2C_StopCondition();
	
    while (1) {
		
		I2C_SendByteByADDR(0, 0b11010000);
  ce:	60 ed       	ldi	r22, 0xD0	; 208
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	18 d1       	rcall	.+560    	; 0x304 <I2C_SendByteByADDR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x16>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x20>
		_delay_ms(1000);
		I2C_StartCondition();
  e4:	00 00       	nop
		I2C_SendByte(0b11010001);
  e6:	f6 d0       	rcall	.+492    	; 0x2d4 <I2C_StartCondition>
  e8:	81 ed       	ldi	r24, 0xD1	; 209
		sec = I2C_ReadByte();
  ea:	01 d1       	rcall	.+514    	; 0x2ee <I2C_SendByte>
  ec:	1a d1       	rcall	.+564    	; 0x322 <I2C_ReadByte>
  ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sec>
		min = I2C_ReadByte();
  f2:	17 d1       	rcall	.+558    	; 0x322 <I2C_ReadByte>
  f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <min>
		hour = I2C_ReadByte();
  f8:	14 d1       	rcall	.+552    	; 0x322 <I2C_ReadByte>
  fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hour>
		dayOfWeek = I2C_ReadByte();
  fe:	11 d1       	rcall	.+546    	; 0x322 <I2C_ReadByte>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		day = I2C_ReadByte();
 104:	0e d1       	rcall	.+540    	; 0x322 <I2C_ReadByte>
 106:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <day>
		month = I2C_ReadByte();
 10a:	0b d1       	rcall	.+534    	; 0x322 <I2C_ReadByte>
 10c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <month>
		year = I2C_ReadLastByte();
 110:	13 d1       	rcall	.+550    	; 0x338 <I2C_ReadLastByte>
 112:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <year>
		I2C_StopCondition();
 116:	e7 d0       	rcall	.+462    	; 0x2e6 <I2C_StopCondition>
		
		sec = DS1307_convertToDec(sec);
 118:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sec>
 11c:	c8 df       	rcall	.-112    	; 0xae <DS1307_convertToDec>
 11e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <sec>
		min = DS1307_convertToDec(min);
 122:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <min>
 126:	c3 df       	rcall	.-122    	; 0xae <DS1307_convertToDec>
 128:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <min>
		hour = DS1307_convertToDec(hour);
 12c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hour>
 130:	be df       	rcall	.-132    	; 0xae <DS1307_convertToDec>
 132:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hour>
		dayOfWeek = DS1307_convertToDec(dayOfWeek);
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	b9 df       	rcall	.-142    	; 0xae <DS1307_convertToDec>
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		day = DS1307_convertToDec(day);
 140:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <day>
 144:	b4 df       	rcall	.-152    	; 0xae <DS1307_convertToDec>
 146:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <day>
 14a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <month>
		month = DS1307_convertToDec(month);
 14e:	af df       	rcall	.-162    	; 0xae <DS1307_convertToDec>
 150:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <month>
 154:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <year>
		year = DS1307_convertToDec(year);
 158:	aa df       	rcall	.-172    	; 0xae <DS1307_convertToDec>
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <year>
 15e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <day>
		
		 USART_Transmit(day/10+0x30);
 162:	8c 9f       	mul	r24, r28
 164:	81 2d       	mov	r24, r1
 166:	11 24       	eor	r1, r1
 168:	86 95       	lsr	r24
 16a:	86 95       	lsr	r24
 16c:	86 95       	lsr	r24
 16e:	80 5d       	subi	r24, 0xD0	; 208
 170:	fa d0       	rcall	.+500    	; 0x366 <USART_Transmit>
 172:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <day>
		 USART_Transmit(day%10+0x30);
 176:	8c 9f       	mul	r24, r28
 178:	91 2d       	mov	r25, r1
 17a:	11 24       	eor	r1, r1
 17c:	96 95       	lsr	r25
 17e:	96 95       	lsr	r25
 180:	96 95       	lsr	r25
 182:	99 0f       	add	r25, r25
 184:	29 2f       	mov	r18, r25
 186:	22 0f       	add	r18, r18
 188:	22 0f       	add	r18, r18
 18a:	92 0f       	add	r25, r18
 18c:	89 1b       	sub	r24, r25
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	ea d0       	rcall	.+468    	; 0x366 <USART_Transmit>
 192:	8e e2       	ldi	r24, 0x2E	; 46
		 USART_Transmit('.');
 194:	e8 d0       	rcall	.+464    	; 0x366 <USART_Transmit>
 196:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <month>
		 USART_Transmit(month/10+0x30);
 19a:	8c 9f       	mul	r24, r28
 19c:	81 2d       	mov	r24, r1
 19e:	11 24       	eor	r1, r1
 1a0:	86 95       	lsr	r24
 1a2:	86 95       	lsr	r24
 1a4:	86 95       	lsr	r24
 1a6:	80 5d       	subi	r24, 0xD0	; 208
 1a8:	de d0       	rcall	.+444    	; 0x366 <USART_Transmit>
 1aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <month>
		 USART_Transmit(month%10+0x30);
 1ae:	8c 9f       	mul	r24, r28
 1b0:	91 2d       	mov	r25, r1
 1b2:	11 24       	eor	r1, r1
 1b4:	96 95       	lsr	r25
 1b6:	96 95       	lsr	r25
 1b8:	96 95       	lsr	r25
 1ba:	99 0f       	add	r25, r25
 1bc:	29 2f       	mov	r18, r25
 1be:	22 0f       	add	r18, r18
 1c0:	22 0f       	add	r18, r18
 1c2:	92 0f       	add	r25, r18
 1c4:	89 1b       	sub	r24, r25
 1c6:	80 5d       	subi	r24, 0xD0	; 208
 1c8:	ce d0       	rcall	.+412    	; 0x366 <USART_Transmit>
 1ca:	8e e2       	ldi	r24, 0x2E	; 46
		 USART_Transmit('.');
 1cc:	cc d0       	rcall	.+408    	; 0x366 <USART_Transmit>
 1ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <year>
		 USART_Transmit(year/10+0x30);
 1d2:	8c 9f       	mul	r24, r28
 1d4:	81 2d       	mov	r24, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	86 95       	lsr	r24
 1da:	86 95       	lsr	r24
 1dc:	86 95       	lsr	r24
 1de:	80 5d       	subi	r24, 0xD0	; 208
		 USART_Transmit(year%10+0x30);
 1e0:	c2 d0       	rcall	.+388    	; 0x366 <USART_Transmit>
 1e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <year>
 1e6:	8c 9f       	mul	r24, r28
 1e8:	91 2d       	mov	r25, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	96 95       	lsr	r25
 1ee:	96 95       	lsr	r25
 1f0:	96 95       	lsr	r25
 1f2:	99 0f       	add	r25, r25
 1f4:	29 2f       	mov	r18, r25
 1f6:	22 0f       	add	r18, r18
 1f8:	22 0f       	add	r18, r18
 1fa:	92 0f       	add	r25, r18
		 USART_Transmit(' ');
 1fc:	89 1b       	sub	r24, r25
 1fe:	80 5d       	subi	r24, 0xD0	; 208
 200:	b2 d0       	rcall	.+356    	; 0x366 <USART_Transmit>
		 USART_Transmit('-');
 202:	80 e2       	ldi	r24, 0x20	; 32
 204:	b0 d0       	rcall	.+352    	; 0x366 <USART_Transmit>
 206:	8d e2       	ldi	r24, 0x2D	; 45
		 USART_Transmit(day+0x30);
 208:	ae d0       	rcall	.+348    	; 0x366 <USART_Transmit>
 20a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <day>
 20e:	80 5d       	subi	r24, 0xD0	; 208
 210:	aa d0       	rcall	.+340    	; 0x366 <USART_Transmit>
		 USART_Transmit('-');
 212:	8d e2       	ldi	r24, 0x2D	; 45
 214:	a8 d0       	rcall	.+336    	; 0x366 <USART_Transmit>
		 USART_Transmit(' ');
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	a6 d0       	rcall	.+332    	; 0x366 <USART_Transmit>
 21a:	80 e2       	ldi	r24, 0x20	; 32
		 USART_Transmit(' ');
 21c:	a4 d0       	rcall	.+328    	; 0x366 <USART_Transmit>
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hour>
		 USART_Transmit(hour/10+0x30);
 222:	8c 9f       	mul	r24, r28
 224:	81 2d       	mov	r24, r1
 226:	11 24       	eor	r1, r1
 228:	86 95       	lsr	r24
 22a:	86 95       	lsr	r24
 22c:	86 95       	lsr	r24
 22e:	80 5d       	subi	r24, 0xD0	; 208
 230:	9a d0       	rcall	.+308    	; 0x366 <USART_Transmit>
 232:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hour>
		 USART_Transmit(hour%10+0x30);
 236:	8c 9f       	mul	r24, r28
 238:	91 2d       	mov	r25, r1
 23a:	11 24       	eor	r1, r1
 23c:	96 95       	lsr	r25
 23e:	96 95       	lsr	r25
 240:	96 95       	lsr	r25
 242:	99 0f       	add	r25, r25
 244:	29 2f       	mov	r18, r25
 246:	22 0f       	add	r18, r18
 248:	22 0f       	add	r18, r18
 24a:	92 0f       	add	r25, r18
 24c:	89 1b       	sub	r24, r25
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	8a d0       	rcall	.+276    	; 0x366 <USART_Transmit>
 252:	8a e3       	ldi	r24, 0x3A	; 58
		 USART_Transmit(':');
 254:	88 d0       	rcall	.+272    	; 0x366 <USART_Transmit>
 256:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <min>
		 USART_Transmit(min/10+0x30);
 25a:	8c 9f       	mul	r24, r28
 25c:	81 2d       	mov	r24, r1
 25e:	11 24       	eor	r1, r1
 260:	86 95       	lsr	r24
 262:	86 95       	lsr	r24
 264:	86 95       	lsr	r24
 266:	80 5d       	subi	r24, 0xD0	; 208
 268:	7e d0       	rcall	.+252    	; 0x366 <USART_Transmit>
 26a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <min>
		 USART_Transmit(min%10+0x30);
 26e:	8c 9f       	mul	r24, r28
 270:	91 2d       	mov	r25, r1
 272:	11 24       	eor	r1, r1
 274:	96 95       	lsr	r25
 276:	96 95       	lsr	r25
 278:	96 95       	lsr	r25
 27a:	99 0f       	add	r25, r25
 27c:	29 2f       	mov	r18, r25
 27e:	22 0f       	add	r18, r18
 280:	22 0f       	add	r18, r18
 282:	92 0f       	add	r25, r18
 284:	89 1b       	sub	r24, r25
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	6e d0       	rcall	.+220    	; 0x366 <USART_Transmit>
		 USART_Transmit(':');
 28a:	8a e3       	ldi	r24, 0x3A	; 58
 28c:	6c d0       	rcall	.+216    	; 0x366 <USART_Transmit>
 28e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sec>
		 USART_Transmit(sec/10+0x30);
 292:	8c 9f       	mul	r24, r28
 294:	81 2d       	mov	r24, r1
 296:	11 24       	eor	r1, r1
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	86 95       	lsr	r24
 29e:	80 5d       	subi	r24, 0xD0	; 208
 2a0:	62 d0       	rcall	.+196    	; 0x366 <USART_Transmit>
 2a2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sec>
		 USART_Transmit(sec%10+0x30);
 2a6:	8c 9f       	mul	r24, r28
 2a8:	91 2d       	mov	r25, r1
 2aa:	11 24       	eor	r1, r1
 2ac:	96 95       	lsr	r25
 2ae:	96 95       	lsr	r25
 2b0:	96 95       	lsr	r25
 2b2:	99 0f       	add	r25, r25
 2b4:	29 2f       	mov	r18, r25
 2b6:	22 0f       	add	r18, r18
 2b8:	22 0f       	add	r18, r18
 2ba:	92 0f       	add	r25, r18
 2bc:	89 1b       	sub	r24, r25
 2be:	80 5d       	subi	r24, 0xD0	; 208
 2c0:	52 d0       	rcall	.+164    	; 0x366 <USART_Transmit>
 2c2:	8d e0       	ldi	r24, 0x0D	; 13
 2c4:	50 d0       	rcall	.+160    	; 0x366 <USART_Transmit>
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
		 USART_Transmit(0x0d);
 2c8:	4e d0       	rcall	.+156    	; 0x366 <USART_Transmit>
 2ca:	01 cf       	rjmp	.-510    	; 0xce <main+0xa>

000002cc <I2C_Init>:
#include "twi.h"

void I2C_Init(void) {
	
	TWBR = 0x20;
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2d2:	08 95       	ret

000002d4 <I2C_StartCondition>:
}

void I2C_StartCondition(void) {
	
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 2d4:	84 ea       	ldi	r24, 0xA4	; 164
 2d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1 << TWINT)));
 2da:	e4 e7       	ldi	r30, 0x74	; 116
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	88 23       	and	r24, r24
 2e2:	ec f7       	brge	.-6      	; 0x2de <I2C_StartCondition+0xa>
}
 2e4:	08 95       	ret

000002e6 <I2C_StopCondition>:

void I2C_StopCondition(void) {
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 2e6:	84 e9       	ldi	r24, 0x94	; 148
 2e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2ec:	08 95       	ret

000002ee <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c) {
	
	TWDR = c;
 2ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1 << TWINT) | (1 << TWEN);
 2f2:	84 e8       	ldi	r24, 0x84	; 132
 2f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1 << TWINT)));
 2f8:	e4 e7       	ldi	r30, 0x74	; 116
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	ec f7       	brge	.-6      	; 0x2fc <I2C_SendByte+0xe>
}
 302:	08 95       	ret

00000304 <I2C_SendByteByADDR>:

void I2C_SendByteByADDR(unsigned char c, unsigned char addr) {
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	c8 2f       	mov	r28, r24
 30a:	d6 2f       	mov	r29, r22
	
	I2C_StartCondition();
 30c:	e3 df       	rcall	.-58     	; 0x2d4 <I2C_StartCondition>
	I2C_SendByte(addr);
 30e:	8d 2f       	mov	r24, r29
 310:	ee df       	rcall	.-36     	; 0x2ee <I2C_SendByte>
	I2C_SendByte(c);
 312:	8c 2f       	mov	r24, r28
 314:	ec df       	rcall	.-40     	; 0x2ee <I2C_SendByte>
 316:	84 e9       	ldi	r24, 0x94	; 148
	while (!(TWCR & (1 << TWINT)));
}

void I2C_StopCondition(void) {
	
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 318:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 31c:	df 91       	pop	r29
	
	I2C_StartCondition();
	I2C_SendByte(addr);
	I2C_SendByte(c);
	I2C_StopCondition();
}
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <I2C_ReadByte>:
 322:	84 ec       	ldi	r24, 0xC4	; 196

unsigned char I2C_ReadByte(void) {
	
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 324:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1 << TWINT)));
 328:	e4 e7       	ldi	r30, 0x74	; 116
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	88 23       	and	r24, r24
 330:	ec f7       	brge	.-6      	; 0x32c <I2C_ReadByte+0xa>
	
	return TWDR;
 332:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
 336:	08 95       	ret

00000338 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void) {
	
	TWCR = (1 << TWINT) | (1 << TWEN);
 338:	84 e8       	ldi	r24, 0x84	; 132
 33a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1 << TWINT)));
 33e:	e4 e7       	ldi	r30, 0x74	; 116
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	ec f7       	brge	.-6      	; 0x342 <I2C_ReadLastByte+0xa>
	
	return TWDR;
 348:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 34c:	08 95       	ret

0000034e <USART_Init>:
#include "USART.h"

void USART_Init(unsigned int speed) {
	UBRR0H = (unsigned char) (speed >> 8);
 34e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char) speed;
 352:	89 b9       	out	0x09, r24	; 9
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	88 61       	ori	r24, 0x18	; 24
 358:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1 << RXCIE0);
 35a:	57 9a       	sbi	0x0a, 7	; 10
	UCSR0A |= (1 << U2X0);
 35c:	59 9a       	sbi	0x0b, 1	; 11
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 35e:	8e e0       	ldi	r24, 0x0E	; 14
 360:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 364:	08 95       	ret

00000366 <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
 366:	5d 9b       	sbis	0x0b, 5	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <USART_Transmit>
	UDR0 = data;
 36a:	8c b9       	out	0x0c, r24	; 12
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
